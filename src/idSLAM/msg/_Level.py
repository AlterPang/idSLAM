"""autogenerated by genpy from idSLAM/Level.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import idSLAM.msg

class Level(genpy.Message):
  _md5sum = "26ef351ad6eea35ef32f5897ab1b4639"
  _type = "idSLAM/Level"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 height
uint32 width

uint32 step # widthstep in bytes

Corner[] corners
float32[] cornerDepth

uint8[] data

================================================================================
MSG: idSLAM/Corner
uint32 ix
uint32 iy

"""
  __slots__ = ['height','width','step','corners','cornerDepth','data']
  _slot_types = ['uint32','uint32','uint32','idSLAM/Corner[]','float32[]','uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       height,width,step,corners,cornerDepth,data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Level, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.height is None:
        self.height = 0
      if self.width is None:
        self.width = 0
      if self.step is None:
        self.step = 0
      if self.corners is None:
        self.corners = []
      if self.cornerDepth is None:
        self.cornerDepth = []
      if self.data is None:
        self.data = ''
    else:
      self.height = 0
      self.width = 0
      self.step = 0
      self.corners = []
      self.cornerDepth = []
      self.data = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.height, _x.width, _x.step))
      length = len(self.corners)
      buff.write(_struct_I.pack(length))
      for val1 in self.corners:
        _x = val1
        buff.write(_struct_2I.pack(_x.ix, _x.iy))
      length = len(self.cornerDepth)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.cornerDepth))
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.corners is None:
        self.corners = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.height, _x.width, _x.step,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.corners = []
      for i in range(0, length):
        val1 = idSLAM.msg.Corner()
        _x = val1
        start = end
        end += 8
        (_x.ix, _x.iy,) = _struct_2I.unpack(str[start:end])
        self.corners.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.cornerDepth = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.height, _x.width, _x.step))
      length = len(self.corners)
      buff.write(_struct_I.pack(length))
      for val1 in self.corners:
        _x = val1
        buff.write(_struct_2I.pack(_x.ix, _x.iy))
      length = len(self.cornerDepth)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.cornerDepth.tostring())
      _x = self.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.corners is None:
        self.corners = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.height, _x.width, _x.step,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.corners = []
      for i in range(0, length):
        val1 = idSLAM.msg.Corner()
        _x = val1
        start = end
        end += 8
        (_x.ix, _x.iy,) = _struct_2I.unpack(str[start:end])
        self.corners.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.cornerDepth = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_2I = struct.Struct("<2I")
