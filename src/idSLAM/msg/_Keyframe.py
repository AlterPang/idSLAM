"""autogenerated by genpy from idSLAM/Keyframe.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import idSLAM.msg
import geometry_msgs.msg
import genpy
import std_msgs.msg

class Keyframe(genpy.Message):
  _md5sum = "49f525f9f9070f4b51dd04c903af8216"
  _type = "idSLAM/Keyframe"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

int64 id # keyframe id (sequential)
time kftime

int32 nSourceCamera
bool mAssociatedinFinalQueue
bool mAssociateKeyframe
uint32 nAssociatedKf

geometry_msgs/Pose pose

bool haveImuData
geometry_msgs/Quaternion naviTCam

Mappoint[] mappoints
Level[] levels

DepthImage depthImage
RGBImage   rgbImage   # if available

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: idSLAM/Mappoint
float32 px # x coordinate of its 3d position relative to kf
float32 py
float32 pz

int32 level # in which pyramid level of the kf was it found?

float32 ix # x coordinate of its 2D pixel position in the KF (not level)
float32 iy
float32 depth # measured depth in [m] or 0 if not available

================================================================================
MSG: idSLAM/Level
uint32 height
uint32 width

uint32 step # widthstep in bytes

Corner[] corners
float32[] cornerDepth

uint8[] data

================================================================================
MSG: idSLAM/Corner
uint32 ix
uint32 iy

================================================================================
MSG: idSLAM/DepthImage
uint32 height
uint32 width

uint32 step # widthstep in bytes

uint16[] data

================================================================================
MSG: idSLAM/RGBImage
uint32 height
uint32 width

uint32 step # widthstep in bytes

uint8[] data

"""
  __slots__ = ['header','id','kftime','nSourceCamera','mAssociatedinFinalQueue','mAssociateKeyframe','nAssociatedKf','pose','haveImuData','naviTCam','mappoints','levels','depthImage','rgbImage']
  _slot_types = ['std_msgs/Header','int64','time','int32','bool','bool','uint32','geometry_msgs/Pose','bool','geometry_msgs/Quaternion','idSLAM/Mappoint[]','idSLAM/Level[]','idSLAM/DepthImage','idSLAM/RGBImage']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,id,kftime,nSourceCamera,mAssociatedinFinalQueue,mAssociateKeyframe,nAssociatedKf,pose,haveImuData,naviTCam,mappoints,levels,depthImage,rgbImage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Keyframe, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.id is None:
        self.id = 0
      if self.kftime is None:
        self.kftime = genpy.Time()
      if self.nSourceCamera is None:
        self.nSourceCamera = 0
      if self.mAssociatedinFinalQueue is None:
        self.mAssociatedinFinalQueue = False
      if self.mAssociateKeyframe is None:
        self.mAssociateKeyframe = False
      if self.nAssociatedKf is None:
        self.nAssociatedKf = 0
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.haveImuData is None:
        self.haveImuData = False
      if self.naviTCam is None:
        self.naviTCam = geometry_msgs.msg.Quaternion()
      if self.mappoints is None:
        self.mappoints = []
      if self.levels is None:
        self.levels = []
      if self.depthImage is None:
        self.depthImage = idSLAM.msg.DepthImage()
      if self.rgbImage is None:
        self.rgbImage = idSLAM.msg.RGBImage()
    else:
      self.header = std_msgs.msg.Header()
      self.id = 0
      self.kftime = genpy.Time()
      self.nSourceCamera = 0
      self.mAssociatedinFinalQueue = False
      self.mAssociateKeyframe = False
      self.nAssociatedKf = 0
      self.pose = geometry_msgs.msg.Pose()
      self.haveImuData = False
      self.naviTCam = geometry_msgs.msg.Quaternion()
      self.mappoints = []
      self.levels = []
      self.depthImage = idSLAM.msg.DepthImage()
      self.rgbImage = idSLAM.msg.RGBImage()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_q2Ii2BI7dB4d.pack(_x.id, _x.kftime.secs, _x.kftime.nsecs, _x.nSourceCamera, _x.mAssociatedinFinalQueue, _x.mAssociateKeyframe, _x.nAssociatedKf, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.haveImuData, _x.naviTCam.x, _x.naviTCam.y, _x.naviTCam.z, _x.naviTCam.w))
      length = len(self.mappoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.mappoints:
        _x = val1
        buff.write(_struct_3fi3f.pack(_x.px, _x.py, _x.pz, _x.level, _x.ix, _x.iy, _x.depth))
      length = len(self.levels)
      buff.write(_struct_I.pack(length))
      for val1 in self.levels:
        _x = val1
        buff.write(_struct_3I.pack(_x.height, _x.width, _x.step))
        length = len(val1.corners)
        buff.write(_struct_I.pack(length))
        for val2 in val1.corners:
          _x = val2
          buff.write(_struct_2I.pack(_x.ix, _x.iy))
        length = len(val1.cornerDepth)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.cornerDepth))
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.depthImage.height, _x.depthImage.width, _x.depthImage.step))
      length = len(self.depthImage.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.pack(pattern, *self.depthImage.data))
      _x = self
      buff.write(_struct_3I.pack(_x.rgbImage.height, _x.rgbImage.width, _x.rgbImage.step))
      _x = self.rgbImage.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.kftime is None:
        self.kftime = genpy.Time()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.naviTCam is None:
        self.naviTCam = geometry_msgs.msg.Quaternion()
      if self.mappoints is None:
        self.mappoints = None
      if self.levels is None:
        self.levels = None
      if self.depthImage is None:
        self.depthImage = idSLAM.msg.DepthImage()
      if self.rgbImage is None:
        self.rgbImage = idSLAM.msg.RGBImage()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 115
      (_x.id, _x.kftime.secs, _x.kftime.nsecs, _x.nSourceCamera, _x.mAssociatedinFinalQueue, _x.mAssociateKeyframe, _x.nAssociatedKf, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.haveImuData, _x.naviTCam.x, _x.naviTCam.y, _x.naviTCam.z, _x.naviTCam.w,) = _struct_q2Ii2BI7dB4d.unpack(str[start:end])
      self.mAssociatedinFinalQueue = bool(self.mAssociatedinFinalQueue)
      self.mAssociateKeyframe = bool(self.mAssociateKeyframe)
      self.haveImuData = bool(self.haveImuData)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mappoints = []
      for i in range(0, length):
        val1 = idSLAM.msg.Mappoint()
        _x = val1
        start = end
        end += 28
        (_x.px, _x.py, _x.pz, _x.level, _x.ix, _x.iy, _x.depth,) = _struct_3fi3f.unpack(str[start:end])
        self.mappoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.levels = []
      for i in range(0, length):
        val1 = idSLAM.msg.Level()
        _x = val1
        start = end
        end += 12
        (_x.height, _x.width, _x.step,) = _struct_3I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.corners = []
        for i in range(0, length):
          val2 = idSLAM.msg.Corner()
          _x = val2
          start = end
          end += 8
          (_x.ix, _x.iy,) = _struct_2I.unpack(str[start:end])
          val1.corners.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.cornerDepth = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.levels.append(val1)
      _x = self
      start = end
      end += 12
      (_x.depthImage.height, _x.depthImage.width, _x.depthImage.step,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.depthImage.data = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.rgbImage.height, _x.rgbImage.width, _x.rgbImage.step,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.rgbImage.data = str[start:end]
      self.kftime.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_q2Ii2BI7dB4d.pack(_x.id, _x.kftime.secs, _x.kftime.nsecs, _x.nSourceCamera, _x.mAssociatedinFinalQueue, _x.mAssociateKeyframe, _x.nAssociatedKf, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.haveImuData, _x.naviTCam.x, _x.naviTCam.y, _x.naviTCam.z, _x.naviTCam.w))
      length = len(self.mappoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.mappoints:
        _x = val1
        buff.write(_struct_3fi3f.pack(_x.px, _x.py, _x.pz, _x.level, _x.ix, _x.iy, _x.depth))
      length = len(self.levels)
      buff.write(_struct_I.pack(length))
      for val1 in self.levels:
        _x = val1
        buff.write(_struct_3I.pack(_x.height, _x.width, _x.step))
        length = len(val1.corners)
        buff.write(_struct_I.pack(length))
        for val2 in val1.corners:
          _x = val2
          buff.write(_struct_2I.pack(_x.ix, _x.iy))
        length = len(val1.cornerDepth)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.cornerDepth.tostring())
        _x = val1.data
        length = len(_x)
        # - if encoded as a list instead, serialize as bytes instead of string
        if type(_x) in [list, tuple]:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.depthImage.height, _x.depthImage.width, _x.depthImage.step))
      length = len(self.depthImage.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.depthImage.data.tostring())
      _x = self
      buff.write(_struct_3I.pack(_x.rgbImage.height, _x.rgbImage.width, _x.rgbImage.step))
      _x = self.rgbImage.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.kftime is None:
        self.kftime = genpy.Time()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.naviTCam is None:
        self.naviTCam = geometry_msgs.msg.Quaternion()
      if self.mappoints is None:
        self.mappoints = None
      if self.levels is None:
        self.levels = None
      if self.depthImage is None:
        self.depthImage = idSLAM.msg.DepthImage()
      if self.rgbImage is None:
        self.rgbImage = idSLAM.msg.RGBImage()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 115
      (_x.id, _x.kftime.secs, _x.kftime.nsecs, _x.nSourceCamera, _x.mAssociatedinFinalQueue, _x.mAssociateKeyframe, _x.nAssociatedKf, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.haveImuData, _x.naviTCam.x, _x.naviTCam.y, _x.naviTCam.z, _x.naviTCam.w,) = _struct_q2Ii2BI7dB4d.unpack(str[start:end])
      self.mAssociatedinFinalQueue = bool(self.mAssociatedinFinalQueue)
      self.mAssociateKeyframe = bool(self.mAssociateKeyframe)
      self.haveImuData = bool(self.haveImuData)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mappoints = []
      for i in range(0, length):
        val1 = idSLAM.msg.Mappoint()
        _x = val1
        start = end
        end += 28
        (_x.px, _x.py, _x.pz, _x.level, _x.ix, _x.iy, _x.depth,) = _struct_3fi3f.unpack(str[start:end])
        self.mappoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.levels = []
      for i in range(0, length):
        val1 = idSLAM.msg.Level()
        _x = val1
        start = end
        end += 12
        (_x.height, _x.width, _x.step,) = _struct_3I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.corners = []
        for i in range(0, length):
          val2 = idSLAM.msg.Corner()
          _x = val2
          start = end
          end += 8
          (_x.ix, _x.iy,) = _struct_2I.unpack(str[start:end])
          val1.corners.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.cornerDepth = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.data = str[start:end]
        self.levels.append(val1)
      _x = self
      start = end
      end += 12
      (_x.depthImage.height, _x.depthImage.width, _x.depthImage.step,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      end += struct.calcsize(pattern)
      self.depthImage.data = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      _x = self
      start = end
      end += 12
      (_x.rgbImage.height, _x.rgbImage.width, _x.rgbImage.step,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.rgbImage.data = str[start:end]
      self.kftime.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_q2Ii2BI7dB4d = struct.Struct("<q2Ii2BI7dB4d")
_struct_3I = struct.Struct("<3I")
_struct_2I = struct.Struct("<2I")
_struct_3fi3f = struct.Struct("<3fi3f")
